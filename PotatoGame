/**
 * The framework for the potato game project
*/

import java.util.ArrayList;

public class PotatoGame
{
    /**
     * A reference to a potato or subclass instance.
     */
    private Base gamePotato;

    /**
     * The GUI frame for the potato game.
     */
    private PotatoFrame gameWindow;

    /**
     * The ArrayList of potato values that make up the game
     */
    private ArrayList<Base> celebGameList;

    /**
     * Builds the game and starts the GUI
     */
    public PotatoGame()
    {
        celebGameList = new ArrayList<Base>();
        gameWindow = new PotatoFrame(this);
    }

    /**
     * Prepares the game to start by re-initializing the celebGameList and having the gameFrame open the start screen.
     */
    public void prepareGame()
    {
        celebGameList = new ArrayList<Base>();
        gameWindow.replaceScreen("START"); 
    }

    /**
     * Determines if the supplied guess is correct.
     * 
     * @param guess
     *            The supplied String
     * @return Whether it matches regardless of case or extraneous external
     *         spaces.
     */
    public boolean processGuess(String guess)
    {
        boolean correct = false;
        if(guess.trim().equalsIgnoreCase(gamePotato.getName()))
        {
            correct = true;
            celebGameList.remove(0);
            if(celebGameList.size()>0)
            {
                gamePotato = celebGameList.get(0);
            }
            else
            {
                gamePotato = new Base("","");
            }
        }
        return correct;
    }

    /**
     * Asserts that the list is initialized and contains at least one potato.
     * Sets the current potato as the first item in the list. Opens the game
     * play screen.
     */
    public void play()
    {
        if (celebGameList != null && celebGameList.size() > 0 )
        {
            this.gamePotato = celebGameList.get(0);
            gameWindow.replaceScreen("GAME");
        } 
    }

    /**
     * Adds a potato of specified type to the game list
     * 
     * @param name
     *            The name of the celebrity
     * @param guess
     *            The clue(s) for the celebrity
     * @param type
     *            What type of celebrity
     */
    public void addPotato(String name, String guess, String type)
    {
        Base currentPotato;
        currentPotato = new Base(name, guess);
        celebGameList.add(currentPotato);
    }

    /**
     * Validates the name of the celebrity. It must have at least 4 characters.
     * @param name The name of the Celebrity
     * @return If the supplied Celebrity is valid
     */
    public boolean validatePotato(String name)
    {
        if(name.trim().length()<4)
        {
            return false;
        }
        return true;
    }

    /**
     * Checks that the supplied clue has at least 10 characters or is a series of clues
     * This method would be expanded based on your subclass of Celebrity.
     * @param clue The text of the clue(s)
     * @param type Supports a subclass of Celebrity 
     * @return If the clue is valid.
     */
    public boolean validateClue(String clue, String type)
    {
        if(clue.trim().length()<10)
            return false;
        return true;
    }

    /**
     * Accessor method for the current size of the list of celebrities
     * 
     * @return Remaining number of celebrities
     */
    public int getPotatoGameSize()
    {
        return celebGameList.size();
    }

    /**
     * Accessor method for the games clue to maintain low coupling between
     * classes
     * 
     * @return The String clue from the current celebrity.
     */
    public String sendClue()
    {
        return gamePotato.getClue();
    }

    /**
     * Accessor method for the games answer to maintain low coupling between
     * classes
     * 
     * @return The String answer from the current celebrity.
     */
    public String sendAnswer()
    {
        return gamePotato.getAnswer();
    }
}
