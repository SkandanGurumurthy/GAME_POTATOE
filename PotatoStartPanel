import javax.swing.JPanel;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SpringLayout;

public class PotatoStartPanel extends JPanel implements ActionListener, KeyListener
{
    private Timer time = new Timer(5,this);
    private int locX;//xcoordinate
    private int locY;
    private int changeX;
    private int changeY;

    private int ballX;
    private int ballY;
    private int cX;
    private int cY;

    private int kX;//location of our character - xcoord
    private int kY;//location of our character - ycoord
    private int ckX;//change x by keypress
    private int ckY;

    public PotatoStartPanel()
    {
        time.start();
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);

        locX = 400; //initial starting x-coordinate of obect
        locY = 0; //initial starting y-coordinate of object
        changeX = 0; //initial change amount of x-coord
        changeY = 0;//initial change amount of y-coord

        ballX = 0;
        ballY = 0;
        cX = 1;
        cY = 1;

        kX = 250;
        kY = 450;
        ckX = 0;
        ckY = 0;
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.fillRect(kX, kY, 40, 40);
        g.setColor(new Color((int)(Math.random()*256),(int)(Math.random()*256),(int)(Math.random()*256)));
        g.fillRect(locX, locY, 50, 80);
        g.setColor(new Color(250,45,72));
        g.drawOval(35,45,60,80);
        for(int i = 0; i < 500; i+=5)
        {
            g.setColor(new Color((int)(Math.random()*256),(int)(Math.random()*256),(int)(Math.random()*256)));
            g.fillOval(i,locY,10,10);
        }
        
        super.paintComponent(g);
        g.setColor(Color.BLUE);
        g.fillRect(locX, locY, 40,40);
        g.setColor(new Color((int)(Math.random()*256),(int)(Math.random()*256),(int)(Math.random()*256)));
        g.fillRect(locX, locY, 50,80);
        g.setColor(new Color(250,45,72));
        g.drawOval(35,45,60,80);

        for(int i = 0; i < 800; i+=20)
        {
        g.setColor(new Color((int)(Math.random()*256),(int)(Math.random()*256),(int)(Math.random()*256)));
        g.fillOval(i,locY,10,10);
        }
         
        g.setColor(Color.BLACK);
        g.fillOval(ballX,ballY,20,20);

    }

    public void actionPerformed(ActionEvent e)
    {
        ballX+=cX;
        ballY+=cY;
        if(ballX>=500)
        {
            cX = -1;
        }
        if(ballY>500)
        {
            cY=-1;
        }
        if(ballX<0)
        {
            cX = 1;
        }
        if(ballY<0)
        {
            cY = 1;
        }

        changeX+=1;
        changeY+=1;
        locX+=changeX;
        locY+=changeY;
        if(locY>=500)
        {
            locY=0;
        }
        kX+=ckX;
        kY+=ckY;
        repaint();

    }

    public void keyPressed(KeyEvent e)
    {
        int c = e.getKeyCode();
        if(c == KeyEvent.VK_RIGHT)
        {
            ckX = 1;
        }
        if(c == KeyEvent.VK_LEFT)
        {
            ckX = -1;
        }
        if(c == KeyEvent.VK_UP)
        {
            ckY = -1;
        }
        if(c == KeyEvent.VK_DOWN)
        {
            ckY = 1;
        }
    }

    public void keyTyped(KeyEvent e)
    {
        int c = e.getKeyCode();
        if(c == KeyEvent.VK_RIGHT)
        {
            ckX = 1;
        }
        if(c == KeyEvent.VK_LEFT)
        {
            ckX = -1;
        }
        if(c == KeyEvent.VK_UP)
        {
            ckY = -1;
        }
        if(c == KeyEvent.VK_DOWN)
        {
            ckY = 1;
        }
    }

    public void keyReleased(KeyEvent e)
    {
        int c = e.getKeyCode();
        if(c == KeyEvent.VK_RIGHT)
        {
            ckX = 0;
        }
        if(c == KeyEvent.VK_LEFT)
        {
            ckX = 0;
        }
        if(c == KeyEvent.VK_UP)
        {
            ckY = 0;
        }
        if(c == KeyEvent.VK_DOWN)
        {
            ckY = 0;
        }
    }
}

